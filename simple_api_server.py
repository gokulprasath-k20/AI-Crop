# SIH 2025 - Simple API Server (Working Version)
# Flask-based REST API for crop recommendation

from flask import Flask, request, jsonify
import json
from working_crop_system import comprehensive_analysis

app = Flask(__name__)

# Enable CORS manually
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE')
    return response

@app.route('/')
def home():
    """Home page with API information."""
    return jsonify({
        "message": "üåæ SIH 2025 Crop Recommendation API",
        "status": "operational",
        "endpoints": {
            "health": "/api/health",
            "recommend": "/api/recommend (POST)",
            "crops": "/api/crops"
        },
        "version": "1.0.0"
    })

@app.route('/api/health')
def health_check():
    """Health check endpoint."""
    return jsonify({
        "status": "healthy",
        "service": "SIH 2025 Crop Recommendation API",
        "version": "1.0.0",
        "supported_crops": 24,
        "languages": ["English", "Hindi", "Bengali"]
    })

@app.route('/api/recommend', methods=['POST'])
def recommend_crop():
    """Main crop recommendation endpoint."""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                "status": "error",
                "message": "No JSON data provided"
            }), 400
        
        # Validate required parameters
        required_params = ['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']
        for param in required_params:
            if param not in data:
                return jsonify({
                    "status": "error",
                    "message": f"Missing required parameter: {param}"
                }), 400
        
        # Extract parameters
        N = float(data['N'])
        P = float(data['P'])
        K = float(data['K'])
        temperature = float(data['temperature'])
        humidity = float(data['humidity'])
        ph = float(data['ph'])
        rainfall = float(data['rainfall'])
        
        # Get comprehensive analysis
        result = comprehensive_analysis(N, P, K, temperature, humidity, ph, rainfall)
        
        # Get crop names in different languages
        def get_hindi_name(crop):
            hindi_names = {
                'rice': '‡§ö‡§æ‡§µ‡§≤', 'wheat': '‡§ó‡•á‡§π‡•Ç‡§Ç', 'maize': '‡§Æ‡§ï‡•ç‡§ï‡§æ', 'cotton': '‡§ï‡§™‡§æ‡§∏',
                'sugarcane': '‡§ó‡§®‡•ç‡§®‡§æ', 'jute': '‡§ú‡•Ç‡§ü', 'coffee': '‡§ï‡•â‡§´‡•Ä', 'coconut': '‡§®‡§æ‡§∞‡§ø‡§Ø‡§≤',
                'papaya': '‡§™‡§™‡•Ä‡§§‡§æ', 'orange': '‡§∏‡§Ç‡§§‡§∞‡§æ', 'apple': '‡§∏‡•á‡§¨', 'muskmelon': '‡§ñ‡§∞‡§¨‡•Ç‡§ú‡§æ',
                'watermelon': '‡§§‡§∞‡§¨‡•Ç‡§ú', 'grapes': '‡§Ö‡§Ç‡§ó‡•Ç‡§∞', 'mango': '‡§Ü‡§Æ', 'banana': '‡§ï‡•á‡§≤‡§æ',
                'pomegranate': '‡§Ö‡§®‡§æ‡§∞', 'lentil': '‡§Æ‡§∏‡•Ç‡§∞', 'blackgram': '‡§â‡§°‡§º‡§¶', 'mungbean': '‡§Æ‡•Ç‡§Ç‡§ó',
                'mothbeans': '‡§Æ‡•ã‡§†', 'pigeonpeas': '‡§Ö‡§∞‡§π‡§∞', 'kidneybeans': '‡§∞‡§æ‡§ú‡§Æ‡§æ', 'chickpea': '‡§ö‡§®‡§æ'
            }
            return hindi_names.get(crop, crop)
        
        def get_bengali_name(crop):
            bengali_names = {
                'rice': '‡¶ß‡¶æ‡¶®', 'wheat': '‡¶ó‡¶Æ', 'maize': '‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ', 'cotton': '‡¶§‡ßÅ‡¶≤‡¶æ',
                'sugarcane': '‡¶Ü‡¶ñ', 'jute': '‡¶™‡¶æ‡¶ü', 'coffee': '‡¶ï‡¶´‡¶ø', 'coconut': '‡¶®‡¶æ‡¶∞‡¶ï‡ßá‡¶≤',
                'papaya': '‡¶™‡ßá‡¶Å‡¶™‡ßá', 'orange': '‡¶ï‡¶Æ‡¶≤‡¶æ', 'apple': '‡¶Ü‡¶™‡ßá‡¶≤', 'muskmelon': '‡¶ñ‡¶∞‡¶Æ‡ßÅ‡¶ú',
                'watermelon': '‡¶§‡¶∞‡¶Æ‡ßÅ‡¶ú', 'grapes': '‡¶Ü‡¶ô‡ßÅ‡¶∞', 'mango': '‡¶Ü‡¶Æ', 'banana': '‡¶ï‡¶≤‡¶æ',
                'pomegranate': '‡¶°‡¶æ‡¶≤‡¶ø‡¶Æ', 'lentil': '‡¶Æ‡¶∏‡ßÅ‡¶∞', 'blackgram': '‡¶ï‡¶æ‡¶≤‡ßã ‡¶õ‡ßã‡¶≤‡¶æ', 'mungbean': '‡¶Æ‡ßÅ‡¶ó',
                'mothbeans': '‡¶Æ‡¶•', 'pigeonpeas': '‡¶Ö‡¶°‡¶º‡¶π‡¶∞', 'kidneybeans': '‡¶∞‡¶æ‡¶ú‡¶Æ‡¶æ', 'chickpea': '‡¶õ‡ßã‡¶≤‡¶æ'
            }
            return bengali_names.get(crop, crop)
        
        # Format response for mobile
        primary = result['primary_recommendation']
        
        response = {
            "status": "success",
            "timestamp": "2025-09-17T20:07:15+05:30",
            "input_parameters": {
                "nitrogen": N, "phosphorus": P, "potassium": K,
                "temperature": temperature, "humidity": humidity,
                "ph": ph, "rainfall": rainfall
            },
            "recommendation": {
                "primary_crop": {
                    "name": primary['crop'],
                    "name_hindi": get_hindi_name(primary['crop']),
                    "name_bengali": get_bengali_name(primary['crop']),
                    "confidence": primary['confidence_score'],
                    "predicted_yield": primary['predicted_yield_kg_per_ha'],
                    "sustainability_score": primary['sustainability_score']
                },
                "alternatives": [
                    {
                        "name": alt['crop'],
                        "name_hindi": get_hindi_name(alt['crop']),
                        "name_bengali": get_bengali_name(alt['crop']),
                        "yield": alt['predicted_yield_kg_per_ha'],
                        "sustainability": alt['sustainability_score'],
                        "suitability": alt['suitability_score']
                    } for alt in result['alternative_crops'][:3]
                ]
            },
            "validation": {
                "warnings": result['input_validation']['warnings'],
                "is_valid": result['input_validation']['is_valid']
            },
            "system_info": {
                "model_accuracy": "94%",
                "total_crops_supported": 24,
                "languages_supported": 3
            }
        }
        
        return jsonify(response)
        
    except ValueError as e:
        return jsonify({
            "status": "error",
            "message": f"Invalid parameter value: {str(e)}"
        }), 400
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": f"Internal server error: {str(e)}"
        }), 500

@app.route('/api/crops')
def get_supported_crops():
    """Get list of all supported crops."""
    crops = [
        {"english": "rice", "hindi": "‡§ö‡§æ‡§µ‡§≤", "bengali": "‡¶ß‡¶æ‡¶®", "category": "cereal"},
        {"english": "wheat", "hindi": "‡§ó‡•á‡§π‡•Ç‡§Ç", "bengali": "‡¶ó‡¶Æ", "category": "cereal"},
        {"english": "maize", "hindi": "‡§Æ‡§ï‡•ç‡§ï‡§æ", "bengali": "‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ", "category": "cereal"},
        {"english": "cotton", "hindi": "‡§ï‡§™‡§æ‡§∏", "bengali": "‡¶§‡ßÅ‡¶≤‡¶æ", "category": "cash_crop"},
        {"english": "sugarcane", "hindi": "‡§ó‡§®‡•ç‡§®‡§æ", "bengali": "‡¶Ü‡¶ñ", "category": "cash_crop"},
        {"english": "jute", "hindi": "‡§ú‡•Ç‡§ü", "bengali": "‡¶™‡¶æ‡¶ü", "category": "cash_crop"},
        {"english": "coffee", "hindi": "‡§ï‡•â‡§´‡•Ä", "bengali": "‡¶ï‡¶´‡¶ø", "category": "cash_crop"},
        {"english": "coconut", "hindi": "‡§®‡§æ‡§∞‡§ø‡§Ø‡§≤", "bengali": "‡¶®‡¶æ‡¶∞‡¶ï‡ßá‡¶≤", "category": "fruit"},
        {"english": "papaya", "hindi": "‡§™‡§™‡•Ä‡§§‡§æ", "bengali": "‡¶™‡ßá‡¶Å‡¶™‡ßá", "category": "fruit"},
        {"english": "orange", "hindi": "‡§∏‡§Ç‡§§‡§∞‡§æ", "bengali": "‡¶ï‡¶Æ‡¶≤‡¶æ", "category": "fruit"},
        {"english": "apple", "hindi": "‡§∏‡•á‡§¨", "bengali": "‡¶Ü‡¶™‡ßá‡¶≤", "category": "fruit"},
        {"english": "muskmelon", "hindi": "‡§ñ‡§∞‡§¨‡•Ç‡§ú‡§æ", "bengali": "‡¶ñ‡¶∞‡¶Æ‡ßÅ‡¶ú", "category": "vegetable"},
        {"english": "watermelon", "hindi": "‡§§‡§∞‡§¨‡•Ç‡§ú", "bengali": "‡¶§‡¶∞‡¶Æ‡ßÅ‡¶ú", "category": "vegetable"},
        {"english": "grapes", "hindi": "‡§Ö‡§Ç‡§ó‡•Ç‡§∞", "bengali": "‡¶Ü‡¶ô‡ßÅ‡¶∞", "category": "fruit"},
        {"english": "mango", "hindi": "‡§Ü‡§Æ", "bengali": "‡¶Ü‡¶Æ", "category": "fruit"},
        {"english": "banana", "hindi": "‡§ï‡•á‡§≤‡§æ", "bengali": "‡¶ï‡¶≤‡¶æ", "category": "fruit"},
        {"english": "pomegranate", "hindi": "‡§Ö‡§®‡§æ‡§∞", "bengali": "‡¶°‡¶æ‡¶≤‡¶ø‡¶Æ", "category": "fruit"},
        {"english": "lentil", "hindi": "‡§Æ‡§∏‡•Ç‡§∞", "bengali": "‡¶Æ‡¶∏‡ßÅ‡¶∞", "category": "pulse"},
        {"english": "blackgram", "hindi": "‡§â‡§°‡§º‡§¶", "bengali": "‡¶ï‡¶æ‡¶≤‡ßã ‡¶õ‡ßã‡¶≤‡¶æ", "category": "pulse"},
        {"english": "mungbean", "hindi": "‡§Æ‡•Ç‡§Ç‡§ó", "bengali": "‡¶Æ‡ßÅ‡¶ó", "category": "pulse"},
        {"english": "mothbeans", "hindi": "‡§Æ‡•ã‡§†", "bengali": "‡¶Æ‡¶•", "category": "pulse"},
        {"english": "pigeonpeas", "hindi": "‡§Ö‡§∞‡§π‡§∞", "bengali": "‡¶Ö‡¶°‡¶º‡¶π‡¶∞", "category": "pulse"},
        {"english": "kidneybeans", "hindi": "‡§∞‡§æ‡§ú‡§Æ‡§æ", "bengali": "‡¶∞‡¶æ‡¶ú‡¶Æ‡¶æ", "category": "pulse"},
        {"english": "chickpea", "hindi": "‡§ö‡§®‡§æ", "bengali": "‡¶õ‡ßã‡¶≤‡¶æ", "category": "pulse"}
    ]
    
    return jsonify({
        "status": "success",
        "total_crops": len(crops),
        "crops": crops
    })

if __name__ == '__main__':
    print("üöÄ Starting SIH 2025 Crop Recommendation API Server...")
    print("üì± Mobile app backend ready!")
    print("üåê Multilingual support enabled (Hindi, Bengali)")
    print("üåæ 24 crops supported for Jharkhand farmers")
    print("üîó Server will be available at: http://localhost:5000")
    
    app.run(host='0.0.0.0', port=5000, debug=True)
